#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
    fallbackPrimTypes = {
        token[] Derived = ["OldDerived", "OlderDerived"]
    }
)

class "DerivedNonAppliedAPI"
{
}

class "NonAppliedAPI"
{
}

class "SingleApplyAPI" (
    apiSchemas = ["BuiltinAPI"]
)
{
}

class "EmptyMultipleApplyAPI"
{
}

class "MultipleApplyAPI"
{
    opaque test:__INSTANCE_NAME__
    int test:__INSTANCE_NAME__:testAttrOne
    double test:__INSTANCE_NAME__:testAttrTwo
}

class "PublicMultipleApplyAPI" (
    apiSchemas = ["MultiApplyAPI:__INSTANCE_NAME__", "BuiltinMultiApplyAPI:__INSTANCE_NAME__:builtin"]
)
{
    opaque testo:__INSTANCE_NAME__
    int testo:__INSTANCE_NAME__:testAttrOne
    double testo:__INSTANCE_NAME__:testAttrTwo
}

class "Base" (
    apiSchemas = ["BuiltinAPI"]
    customData = {
        token[] apiSchemaOverridePropertyNames = ["overrideBaseTrueDerivedFalse", "overrideBaseTrueDerivedNone", "overrideBaseTrueDerivedTrue"]
        string userDocBrief = 'This doc should only exist on the "Base" class.'
    }
)
{
    asset asset = @asset@
    asset[] assetArray
    bool bool = 1
    bool[] boolArray
    color3d color3d = (0, 0, 0)
    color3d[] color3dArray
    color3f color3f = (0, 0, 0)
    color3f[] color3fArray
    color3h color3h = (0, 0, 0)
    color3h[] color3hArray
    color4d color4d = (0, 0, 0, 0)
    color4d[] color4dArray
    color4f color4f = (0, 0, 0, 0)
    color4f[] color4fArray
    color4h color4h = (0, 0, 0, 0)
    color4h[] color4hArray
    double double = 0
    double2 double2 = (0, 0)
    double2[] double2Array
    double3 double3 = (0, 0, 0)
    double3[] double3Array
    double4 double4 = (0, 0, 0, 0)
    double4[] double4Array
    double[] doubleArray
    float float = 0
    float2 float2 = (0, 0)
    float2[] float2Array
    float3 float3 = (0, 0, 0)
    float3[] float3Array
    float4 float4 = (0, 0, 0, 0)
    float4[] float4Array
    float[] floatArray
    frame4d frame4d = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    frame4d[] frame4dArray
    half half = 0
    half2 half2 = (0, 0)
    half2[] half2Array
    half3 half3 = (0, 0, 0)
    half3[] half3Array
    half4 half4 = (0, 0, 0, 0)
    half4[] half4Array
    half[] halfArray
    int int = 0
    int2 int2 = (0, 0)
    int2[] int2Array
    int3 int3 = (0, 0, 0)
    int3[] int3Array
    int4 int4 = (0, 0, 0, 0)
    int4[] int4Array
    int64 int64 = 0
    int64[] int64Array
    int[] intArray
    matrix2d matrix2d = ( (1, 0), (0, 1) )
    matrix2d[] matrix2dArray
    matrix3d matrix3d = ( (1, 0, 0), (0, 1, 0), (0, 0, 1) )
    matrix3d[] matrix3dArray
    matrix4d matrix4d = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    matrix4d[] matrix4dArray
    custom double myDouble
    uniform bool myUniformBool = 0 (
        customData = {
            string userDocBrief = "Uniform bool, default false."
        }
    )
    token myVaryingToken = "VariableTokenDefault" (
        allowedTokens = ["VariableTokenAllowed1", "VariableTokenAllowed2", "VariableTokenAllowed<3>", ""]
        customData = {
            string userDocBrief = "VariableToken attribute docs."
        }
    )
    uniform token[] myVaryingTokenArray = ["VariableTokenArrayAllowed1", ""] (
        allowedTokens = ["VariableTokenArrayAllowed1", "VariableTokenArrayAllowed2", "VariableTokenArrayAllowed<3>", ""]
        customData = {
            string userDocBrief = "VariableTokenArray attribute docs."
        }
    )
    normal3d normal3d = (0, 0, 0)
    normal3d[] normal3dArray
    normal3f normal3f = (0, 0, 0)
    normal3f[] normal3fArray
    normal3h normal3h = (0, 0, 0)
    normal3h[] normal3hArray
    int overrideBaseFalseDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to False in Base."
        }
    )
    int overrideBaseFalseDerivedNone = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to False in Base."
        }
    )
    int overrideBaseNoneDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override has no opinion in Base."
        }
    )
    int overrideBaseTrueDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    int overrideBaseTrueDerivedNone = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    int overrideBaseTrueDerivedTrue = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    point3d point3d = (0, 0, 0)
    point3d[] point3dArray
    point3f point3f = (0, 0, 0)
    point3f[] point3fArray
    point3h point3h = (0, 0, 0)
    point3h[] point3hArray
    quatd quatd = (1, 0, 0, 0)
    quatd[] quatdArray
    quatf quatf = (1, 0, 0, 0)
    quatf[] quatfArray
    quath quath = (1, 0, 0, 0)
    quath[] quathArray
    string string = "string"
    string[] stringArray
    token token = "token"
    token[] tokenArray
    uchar uchar = 0
    uchar[] ucharArray
    uint uint = 0
    uint64 uint64 = 0
    uint64[] uint64Array
    uint[] uintArray
    vector3d vector3d = (0, 0, 0)
    vector3d[] vector3dArray
    vector3f vector3f = (0, 0, 0)
    vector3f[] vector3fArray
    vector3h vector3h = (0, 0, 0)
    vector3h[] vector3hArray
}

class Derived "Derived" (
    apiSchemas = ["BuiltinAPI"]
    customData = {
        token[] apiSchemaOverridePropertyNames = ["overrideBaseTrueDerivedTrue"]
        string userDocBrief = "Emphasized! Test Section."
    }
)
{
    asset asset = @asset@
    asset[] assetArray
    rel binding (
        customData = {
            string userDocBrief = "This is my awesome relationship."
        }
    )
    bool bool = 1
    bool[] boolArray
    color3d color3d = (0, 0, 0)
    color3d[] color3dArray
    color3f color3f = (0, 0, 0)
    color3f[] color3fArray
    color3h color3h = (0, 0, 0)
    color3h[] color3hArray
    color4d color4d = (0, 0, 0, 0)
    color4d[] color4dArray
    color4f color4f = (0, 0, 0, 0)
    color4f[] color4fArray
    color4h color4h = (0, 0, 0, 0)
    color4h[] color4hArray
    int[] cornerIndices = [] (
        customData = {
            string userDocBrief = "The vertex indices of all vertices that are sharp corners."
        }
    )
    float[] cornerSharpnesses = [] (
        customData = {
            string userDocBrief = """The sharpness values for corners: each corner gets a single
        sharpness value (Usd.Mesh.SHARPNESS_INFINITE for a perfectly sharp
        corner), so the size of this array must match that of
        'cornerIndices'."""
        }
    )
    int[] creaseLengths = [] (
        customData = {
            string userDocBrief = """The length of this array specifies the number of creases on the
        surface."""
        }
    )
    double double = 0
    double2 double2 = (0, 0)
    double2[] double2Array
    double3 double3 = (0, 0, 0)
    double3[] double3Array
    double4 double4 = (0, 0, 0, 0)
    double4[] double4Array
    double[] doubleArray
    float float = 0
    float2 float2 = (0, 0)
    float2[] float2Array
    float3 float3 = (0, 0, 0)
    float3[] float3Array
    float4 float4 = (0, 0, 0, 0)
    float4[] float4Array
    float[] floatArray
    frame4d frame4d = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    frame4d[] frame4dArray
    half half = 0
    half2 half2 = (0, 0)
    half2[] half2Array
    half3 half3 = (0, 0, 0)
    half3[] half3Array
    half4 half4 = (0, 0, 0, 0)
    half4[] half4Array
    half[] halfArray
    int[] holeIndices = [] (
        customData = {
            string userDocBrief = """The face indices (indexing into the 'faceVertexCounts'
        attribute) of all faces that should be made invisible."""
        }
    )
    int int = 0
    int2 int2 = (0, 0)
    int2[] int2Array
    int3 int3 = (0, 0, 0)
    int3[] int3Array
    int4 int4 = (0, 0, 0, 0)
    int4[] int4Array
    int64 int64 = 0
    int64[] int64Array
    int[] intArray
    token justDefault = "newToken" (
        customData = {
            string userDocBrief = "newToken should be included in the global token set."
        }
    )
    matrix2d matrix2d = ( (1, 0), (0, 1) )
    matrix2d[] matrix2dArray
    matrix3d matrix3d = ( (1, 0, 0), (0, 1, 0), (0, 0, 1) )
    matrix3d[] matrix3dArray
    matrix4d matrix4d = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    matrix4d[] matrix4dArray
    custom double myDouble
    uniform bool myUniformBool = 0 (
        customData = {
            string userDocBrief = "Uniform bool, default false."
        }
    )
    token myVaryingToken = "VariableTokenDefault" (
        allowedTokens = ["VariableTokenAllowed1", "VariableTokenAllowed2", "VariableTokenAllowed<3>", ""]
        customData = {
            string userDocBrief = "VariableToken attribute docs."
        }
    )
    uniform token[] myVaryingTokenArray = ["VariableTokenArrayAllowed1", ""] (
        allowedTokens = ["VariableTokenArrayAllowed1", "VariableTokenArrayAllowed2", "VariableTokenArrayAllowed<3>", ""]
        customData = {
            string userDocBrief = "VariableTokenArray attribute docs."
        }
    )
    float3[] myVecfArray
    float namespaced:property = 1
    normal3d normal3d = (0, 0, 0)
    normal3d[] normal3dArray
    normal3f normal3f = (0, 0, 0)
    normal3f[] normal3fArray
    normal3h normal3h = (0, 0, 0)
    normal3h[] normal3hArray
    int overrideBaseFalseDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to False in Base."
        }
    )
    int overrideBaseFalseDerivedNone = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to False in Base."
        }
    )
    int overrideBaseNoneDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override has no opinion in Base."
        }
    )
    int overrideBaseTrueDerivedFalse = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    int overrideBaseTrueDerivedNone = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    int overrideBaseTrueDerivedTrue = 1 (
        customData = {
            string userDocBrief = "API schema override explicitly set to True in Base."
        }
    )
    float3 pivotPosition = (0, 0, 0) (
        customData = {
            string userDocBrief = "Rotation pivot position for this prim's transformation."
        }
    )
    point3d point3d = (0, 0, 0)
    point3d[] point3dArray
    point3f point3f = (0, 0, 0)
    point3f[] point3fArray
    point3h point3h = (0, 0, 0)
    point3h[] point3hArray
    quatd quatd = (1, 0, 0, 0)
    quatd[] quatdArray
    quatf quatf = (1, 0, 0, 0)
    quatf[] quatfArray
    quath quath = (1, 0, 0, 0)
    quath[] quathArray
    string string = "string"
    string[] stringArray
    asset[] testingAsset
    token token = "token"
    token[] tokenArray
    matrix4d transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
        customData = {
            string userDocBrief = """Double-precision transformation matrix, which should encode
        the entire local transformation for a prim."""
        }
    )
    uchar uchar = 0
    uchar[] ucharArray
    uint uint = 0
    uint64 uint64 = 0
    uint64[] uint64Array
    uint[] uintArray
    vector3d vector3d = (0, 0, 0)
    vector3d[] vector3dArray
    vector3f vector3f = (0, 0, 0)
    vector3f[] vector3fArray
    vector3h vector3h = (0, 0, 0)
    vector3h[] vector3hArray
}

class TestPxHairman "TestPxHairman"
{
    float attrWithoutGeneratedAccessorAPI (
        customData = {
            string userDocBrief = "This exercises empty apiName to skip accessor generation."
        }
    )
    rel relCanShareApiNameWithAttr (
        customData = {
            string userDocBrief = "This exercises custom API naming."
        }
    )
    float riStatements:attributes:user:Gofur_GeomOnHairdensity (
        customData = {
            string userDocBrief = "This exercises custom API naming."
        }
    )
    custom float temp
}

class TestPxHairman_1 "TestPxHairman_1"
{
    custom double temp
}

class TestNoVersion0_2 "TestNoVersion0_2"
{
    custom double temp
}

class "SingleApplyAPI_1" (
    apiSchemas = ["BuiltinAPI"]
)
{
}

class "MultipleApplyAPI_1"
{
    int testNewVersion:__INSTANCE_NAME__:testAttrOne
    double testNewVersion:__INSTANCE_NAME__:testAttrTwo
}

class UsdContrivedNoAlias "UsdContrivedNoAlias"
{
}

class "TestReflectedAPIBase" (
    apiSchemas = ["TestReflectedInternalAPI", "TestReflectedExternalAPI"]
)
{
}

class "TestReflectedInternalAPI" (
    apiSchemas = ["BuiltinAPI"]
)
{
    int testAttrDuplicate
    int testAttrInternal
    rel testRelDuplicate
    rel testRelInternal
}

class "TestPropertyOrderTyped"
{
    reorder properties = ["testAttrTwo", "testAttrOne"]
    int testAttrOne
    int testAttrTwo
}

class "TestPropertyOrderSingleApplyAPI"
{
    reorder properties = ["testAttrTwo", "testAttrOne"]
    int testAttrOne
    int testAttrTwo
}

