#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class "RenderSettingsBase" (
    customData = {
        string userDocBrief = """Abstract base class that defines render settings that
    can be specified on either a RenderSettings prim or a RenderProduct 
    prim."""
    }
)
{
    uniform token aspectRatioConformPolicy = "expandAperture" (
        allowedTokens = ["expandAperture", "cropAperture", "adjustApertureWidth", "adjustApertureHeight", "adjustPixelAspectRatio"]
        customData = {
            string userDocBrief = """Indicates the policy to use to resolve an aspect
        ratio mismatch between the camera aperture and image settings."""
        }
    )
    rel camera (
        customData = {
            string userDocBrief = """The _camera_ relationship specifies the primary
        camera to use in a render."""
        }
    )
    uniform float4 dataWindowNDC = (0, 0, 1, 1) (
        customData = {
            string userDocBrief = """dataWindowNDC specifies the axis-aligned rectangular
        region in the adjusted aperture window within which the renderer
        should produce data."""
        }
    )
    uniform bool disableDepthOfField = 0 (
        customData = {
            string userDocBrief = """Disable all depth of field by setting F-stop of the targeted
        camera to infinity."""
        }
    )
    uniform bool disableMotionBlur = 0 (
        customData = {
            string userDocBrief = """Disable all motion blur by setting the shutter interval
        of the targeted camera to [0,0] - that is, take only one sample,
        namely at the current time code."""
        }
    )
    uniform bool instantaneousShutter = 0 (
        customData = {
            string userDocBrief = "Deprecated - use disableMotionBlur instead."
        }
    )
    uniform float pixelAspectRatio = 1 (
        customData = {
            string userDocBrief = "The aspect ratio (width/height) of image pixels."
        }
    )
    uniform int2 resolution = (2048, 1080) (
        customData = {
            string userDocBrief = """The image pixel resolution, corresponding to the
        camera's screen window."""
        }
    )
}

class RenderSettings "RenderSettings" (
    customData = {
        string userDocBrief = """A UsdRenderSettings prim specifies global settings for
    a render process, including an enumeration of the RenderProducts
    that should result, and the UsdGeomImageable purposes that should
    be rendered."""
    }
)
{
    uniform token aspectRatioConformPolicy = "expandAperture" (
        allowedTokens = ["expandAperture", "cropAperture", "adjustApertureWidth", "adjustApertureHeight", "adjustPixelAspectRatio"]
        customData = {
            string userDocBrief = """Indicates the policy to use to resolve an aspect
        ratio mismatch between the camera aperture and image settings."""
        }
    )
    rel camera (
        customData = {
            string userDocBrief = """The _camera_ relationship specifies the primary
        camera to use in a render."""
        }
    )
    uniform float4 dataWindowNDC = (0, 0, 1, 1) (
        customData = {
            string userDocBrief = """dataWindowNDC specifies the axis-aligned rectangular
        region in the adjusted aperture window within which the renderer
        should produce data."""
        }
    )
    uniform bool disableDepthOfField = 0 (
        customData = {
            string userDocBrief = """Disable all depth of field by setting F-stop of the targeted
        camera to infinity."""
        }
    )
    uniform bool disableMotionBlur = 0 (
        customData = {
            string userDocBrief = """Disable all motion blur by setting the shutter interval
        of the targeted camera to [0,0] - that is, take only one sample,
        namely at the current time code."""
        }
    )
    uniform token[] includedPurposes = ["default", "render"] (
        customData = {
            string userDocBrief = """The list of UsdGeomImageable _purpose_ values that
        should be included in the render."""
        }
    )
    uniform bool instantaneousShutter = 0 (
        customData = {
            string userDocBrief = "Deprecated - use disableMotionBlur instead."
        }
    )
    uniform token[] materialBindingPurposes = ["full", ""] (
        allowedTokens = ["full", "preview", ""]
        customData = {
            string userDocBrief = """Ordered list of material purposes to consider when
        resolving material bindings in the scene."""
        }
    )
    uniform float pixelAspectRatio = 1 (
        customData = {
            string userDocBrief = "The aspect ratio (width/height) of image pixels."
        }
    )
    rel products (
        customData = {
            string userDocBrief = "The set of RenderProducts the render should produce."
        }
    )
    uniform token renderingColorSpace (
        customData = {
            string userDocBrief = """Describes a renderer's working (linear) colorSpace where all
        the renderer/shader math is expected to happen."""
        }
    )
    uniform int2 resolution = (2048, 1080) (
        customData = {
            string userDocBrief = """The image pixel resolution, corresponding to the
        camera's screen window."""
        }
    )
}

class RenderVar "RenderVar" (
    customData = {
        string userDocBrief = """A UsdRenderVar describes a custom data variable for
    a render to produce."""
    }
)
{
    uniform token dataType = "color3f" (
        customData = {
            string userDocBrief = "The type of this channel, as a USD attribute type."
        }
    )
    uniform string sourceName = "" (
        customData = {
            string userDocBrief = """The renderer should look for an output of this name
        as the computed value for the RenderVar."""
        }
    )
    uniform token sourceType = "raw" (
        allowedTokens = ["raw", "primvar", "lpe", "intrinsic"]
        customData = {
            string userDocBrief = "Indicates the type of the source."
        }
    )
}

class RenderProduct "RenderProduct" (
    customData = {
        string userDocBrief = """A UsdRenderProduct describes an image or other
    file-like artifact produced by a render."""
    }
)
{
    uniform token aspectRatioConformPolicy = "expandAperture" (
        allowedTokens = ["expandAperture", "cropAperture", "adjustApertureWidth", "adjustApertureHeight", "adjustPixelAspectRatio"]
        customData = {
            string userDocBrief = """Indicates the policy to use to resolve an aspect
        ratio mismatch between the camera aperture and image settings."""
        }
    )
    rel camera (
        customData = {
            string userDocBrief = """The _camera_ relationship specifies the primary
        camera to use in a render."""
        }
    )
    uniform float4 dataWindowNDC = (0, 0, 1, 1) (
        customData = {
            string userDocBrief = """dataWindowNDC specifies the axis-aligned rectangular
        region in the adjusted aperture window within which the renderer
        should produce data."""
        }
    )
    uniform bool disableDepthOfField = 0 (
        customData = {
            string userDocBrief = """Disable all depth of field by setting F-stop of the targeted
        camera to infinity."""
        }
    )
    uniform bool disableMotionBlur = 0 (
        customData = {
            string userDocBrief = """Disable all motion blur by setting the shutter interval
        of the targeted camera to [0,0] - that is, take only one sample,
        namely at the current time code."""
        }
    )
    uniform bool instantaneousShutter = 0 (
        customData = {
            string userDocBrief = "Deprecated - use disableMotionBlur instead."
        }
    )
    rel orderedVars (
        customData = {
            string userDocBrief = """Specifies the RenderVars that should be consumed and
        combined into the final product."""
        }
    )
    uniform float pixelAspectRatio = 1 (
        customData = {
            string userDocBrief = "The aspect ratio (width/height) of image pixels."
        }
    )
    token productName = "" (
        customData = {
            string userDocBrief = """Specifies the name that the output/display driver
        should give the product."""
        }
    )
    uniform token productType = "raster" (
        allowedTokens = ["raster", "deepRaster"]
        customData = {
            string userDocBrief = "The type of output to produce."
        }
    )
    uniform int2 resolution = (2048, 1080) (
        customData = {
            string userDocBrief = """The image pixel resolution, corresponding to the
        camera's screen window."""
        }
    )
}

class RenderPass "RenderPass" (
    apiSchemas = ["CollectionAPI:renderVisibility", "CollectionAPI:cameraVisibility", "CollectionAPI:prune", "CollectionAPI:matte"]
    customData = {
        token[] apiSchemaOverridePropertyNames = ["collection:cameraVisibility:includeRoot", "collection:renderVisibility:includeRoot"]
        string userDocBrief = """A RenderPass prim encapsulates necessary information
    to generate multi-pass renders."""
    }
)
{
    uniform bool collection:cameraVisibility:includeRoot = 1
    uniform bool collection:renderVisibility:includeRoot = 1
    uniform string[] command (
        customData = {
            string userDocBrief = """The command to run in order to generate
        renders for this pass."""
        }
    )
    uniform asset fileName (
        customData = {
            string userDocBrief = """The asset that contains the rendering prims or other 
        information needed to render this pass."""
        }
    )
    rel inputPasses (
        customData = {
            string userDocBrief = """The set of other Passes that this Pass depends on
        in order to be constructed properly."""
        }
    )
    uniform token passType (
        customData = {
            string userDocBrief = """A string used to categorize differently structured 
        or executed types of passes within a customized pipeline."""
        }
    )
    rel renderSource (
        customData = {
            string userDocBrief = "The source prim to render from."
        }
    )
}

