//
// Copyright 2025 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/rendererCreateArgsSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdRendererCreateArgsSchemaTokens,
    HD_RENDERER_CREATE_ARGS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdBoolDataSourceHandle
HdRendererCreateArgsSchema::GetGpuEnabled() const
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdRendererCreateArgsSchemaTokens->gpuEnabled);
}

HdSampledDataSourceContainerSchema
HdRendererCreateArgsSchema::GetDrivers() const
{
    return HdSampledDataSourceContainerSchema(_GetTypedDataSource<HdContainerDataSource>(
        HdRendererCreateArgsSchemaTokens->drivers));
}

/*static*/
HdContainerDataSourceHandle
HdRendererCreateArgsSchema::BuildRetained(
        const HdBoolDataSourceHandle &gpuEnabled,
        const HdContainerDataSourceHandle &drivers
)
{
    TfToken _names[2];
    HdDataSourceBaseHandle _values[2];

    size_t _count = 0;

    if (gpuEnabled) {
        _names[_count] = HdRendererCreateArgsSchemaTokens->gpuEnabled;
        _values[_count++] = gpuEnabled;
    }

    if (drivers) {
        _names[_count] = HdRendererCreateArgsSchemaTokens->drivers;
        _values[_count++] = drivers;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdRendererCreateArgsSchema::Builder &
HdRendererCreateArgsSchema::Builder::SetGpuEnabled(
    const HdBoolDataSourceHandle &gpuEnabled)
{
    _gpuEnabled = gpuEnabled;
    return *this;
}

HdRendererCreateArgsSchema::Builder &
HdRendererCreateArgsSchema::Builder::SetDrivers(
    const HdContainerDataSourceHandle &drivers)
{
    _drivers = drivers;
    return *this;
}

HdContainerDataSourceHandle
HdRendererCreateArgsSchema::Builder::Build()
{
    return HdRendererCreateArgsSchema::BuildRetained(
        _gpuEnabled,
        _drivers
    );
}

/*static*/
HdRendererCreateArgsSchema
HdRendererCreateArgsSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdRendererCreateArgsSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdRendererCreateArgsSchemaTokens->rendererCreateArgs))
        : nullptr);
}

/*static*/
const TfToken &
HdRendererCreateArgsSchema::GetSchemaToken()
{
    return HdRendererCreateArgsSchemaTokens->rendererCreateArgs;
}

/*static*/
const HdDataSourceLocator &
HdRendererCreateArgsSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdRendererCreateArgsSchema::GetGpuEnabledLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdRendererCreateArgsSchemaTokens->gpuEnabled);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdRendererCreateArgsSchema::GetDriversLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdRendererCreateArgsSchemaTokens->drivers);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE
