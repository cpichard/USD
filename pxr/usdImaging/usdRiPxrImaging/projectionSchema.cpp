//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdRiPxrImaging/projectionSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdRiPxrImagingProjectionSchemaTokens,
    USD_RI_PXR_IMAGING_PROJECTION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdMaterialNodeSchema
UsdRiPxrImagingProjectionSchema::GetResource() const
{
    return HdMaterialNodeSchema(_GetTypedDataSource<HdContainerDataSource>(
        UsdRiPxrImagingProjectionSchemaTokens->resource));
}

/*static*/
HdContainerDataSourceHandle
UsdRiPxrImagingProjectionSchema::BuildRetained(
        const HdContainerDataSourceHandle &resource
)
{
    TfToken _names[1];
    HdDataSourceBaseHandle _values[1];

    size_t _count = 0;

    if (resource) {
        _names[_count] = UsdRiPxrImagingProjectionSchemaTokens->resource;
        _values[_count++] = resource;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdRiPxrImagingProjectionSchema::Builder &
UsdRiPxrImagingProjectionSchema::Builder::SetResource(
    const HdContainerDataSourceHandle &resource)
{
    _resource = resource;
    return *this;
}

HdContainerDataSourceHandle
UsdRiPxrImagingProjectionSchema::Builder::Build()
{
    return UsdRiPxrImagingProjectionSchema::BuildRetained(
        _resource
    );
}

/*static*/
UsdRiPxrImagingProjectionSchema
UsdRiPxrImagingProjectionSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdRiPxrImagingProjectionSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdRiPxrImagingProjectionSchemaTokens->projection))
        : nullptr);
}

/*static*/
const TfToken &
UsdRiPxrImagingProjectionSchema::GetSchemaToken()
{
    return UsdRiPxrImagingProjectionSchemaTokens->projection;
}

/*static*/
const HdDataSourceLocator &
UsdRiPxrImagingProjectionSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdRiPxrImagingProjectionSchema::GetResourceLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdRiPxrImagingProjectionSchemaTokens->resource);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE