#usda 1.0
(
    metersPerUnit = 1.0
    upAxis = "Z"
    defaultPrim = "Root"
)

def SkelRoot "Root" (
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
    def Skeleton "Skeleton"
    {
        uniform token[] joints = ["Root"]
        uniform matrix4d[] bindTransforms = [
            ((1., 0., 0., 0.), (0., 1., 0., 0.), (0., 0., 1., 0.), (0.0, 0.0, 0.0, 1.)),    # Root
        ]
        uniform matrix4d[] restTransforms = [
            ((1., 0., 0., 0.), (0., 1., 0., 0.), (0., 0., 1., 0.), (0., 0., 0., 1.)),    # Root
        ]
    }
    
    def Scope "Geometry"
    {
        def Mesh "box1" (
            prepend apiSchemas = ["MaterialBindingAPI", "SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 6, 7, 1, 2, 5, 6, 0, 4, 7, 3, 0, 1, 5, 4, 3, 7, 6, 2]
            token orientation = "rightHanded"
            point3f[] points = [(-0.6, -0.6, 0), (-0.6, 0.6, 0), (0.6, 0.6, 0), (0.6, -0.6, 0), (-0.6, -0.6, 0.14), (-0.6, 0.6, 0.14), (0.6, 0.6, 0.14), (0.6, -0.6, 0.14)]

            rel material:binding = </Root/Looks/red> (
                bindMaterialAs = "weakerThanDescendants"
            )
            
            int[] primvars:skel:jointIndices = [0, 0, 0, 0] (interpolation = "vertex") # Neck
            float[] primvars:skel:jointWeights = [1., 1., 1., 1.] (interpolation = "vertex")
            prepend rel skel:skeleton = </Root/Skeleton>
            bool doubleSided = 1
        }

        def Mesh "box2" (
            prepend apiSchemas = ["MaterialBindingAPI", "SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 6, 7, 1, 2, 5, 6, 0, 4, 7, 3, 0, 1, 5, 4, 3, 7, 6, 2]
            token orientation = "rightHanded"
            point3f[] points = [(-0.6, -0.6, 1), (-0.6, 0.6, 1), (0.6, 0.6, 1), (0.6, -0.6, 1), (-0.6, -0.6, 1.14), (-0.6, 0.6, 1.14), (0.6, 0.6, 1.14), (0.6, -0.6, 1.14)]
            token scheme = "none"

            rel material:binding = </Root/Looks/red> (
                bindMaterialAs = "weakerThanDescendants"
            )
            
            int[] primvars:skel:jointIndices = [0, 0, 0, 0] (interpolation = "vertex") # Head
            float[] primvars:skel:jointWeights = [1., 1., 1., 1.] (interpolation = "vertex")
            prepend rel skel:skeleton = </Root/Skeleton>
            bool doubleSided = 1
        }
    }

    def Scope "Looks"
    {
        def Material "red"
        {
            token outputs:displacement.connect = </Root/Looks/red/Shader.outputs:displacement>
            token outputs:surface.connect = </Root/Looks/red/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0, 0)
                token outputs:displacement (
                    renderType = "material"
                )
                token outputs:surface (
                    renderType = "material"
                )
            }
        }

        def Material "green"
        {
            token outputs:displacement.connect = </Root/Looks/green/Shader.outputs:displacement>
            token outputs:surface.connect = </Root/Looks/green/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 1, 0)
                token outputs:displacement (
                    renderType = "material"
                )
                token outputs:surface (
                    renderType = "material"
                )
            }
        }
    }
}